/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define FUN  3
#define SYM  4
#define MEDIA  5
#define BLU 6

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <180>;
};

/ {
    combos {
        compatible = "zmk,combos";

        PrevTab {
            bindings = <&kp LG(LS(LEFT_BRACKET))>;
            key-positions = <6 7>;
        };

        NextTab {
            bindings = <&kp LG(LS(RIGHT_BRACKET))>;
            key-positions = <7 8>;
        };

        Clippy {
            bindings = <&kp LG(LA(V))>;
            key-positions = <23 22>;
        };

        Save {
            bindings = <&kp LG(S)>;
            key-positions = <11 12>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            //          ------------------------------------------------------------------------------------------------------------
            //          |  Q  |  W  |  E   |  R   |  T   |                                           |  Y   |  U    |  I    |  O   |   P   |
            //          |  A  |  S  |  D   |  F   |  G   |                                           |  H   |  J    |  K    |  L   |   '   |
            //          |  Z  |  X  |  C   |  V   |  B   |                                           |  N   |  M    |  ,    |  .   |   /   |
            //                      | ESC  | SPC |  TAB | BOOTLOADER |                         | MUTE | RET | BKSP | DEL |

            bindings = <
&kp Q               &kp W        &kp E               &kp R        &kp T    &kp Y  &kp U        &kp I                &kp O          &kp P
&mt LEFT_CONTROL A  &mt LALT S   &mt LEFT_COMMAND D  &mt LSHFT F  &kp G    &kp H  &mt RSHFT J  &mt RIGHT_COMMAND K  &mt RALT L     &mt RIGHT_CONTROL SQT
&kp Z               &kp X        &mt LG(C) C         &mt LG(V) V  &kp B    &kp N  &kp M        &kp COMMA            &kp DOT        &mt LS(SLASH) SLASH
&lt 3 ESCAPE        &lt 2 SPACE  &lt 1 TAB           &kp SPACE                    &kp K_MUTE   &kp ENTER            &kp BACKSPACE  &lt 4 MINUS
            >;

            sensor-bindings =
                <&inc_dec_kp RIGHT_ARROW LEFT_ARROW &inc_dec_kp K_VOLUME_DOWN K_VOLUME_UP>;
        };

        nav_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp LC(LEFT)   &kp LG(LS(LEFT_BRACKET))  &kp LG(LS(RIGHT_BRACKET))  &kp LC(RIGHT)  &kp K_PASTE
&trans  &trans  &trans  &trans  &trans    &kp PAGE_UP    &kp LEFT                  &kp UP                     &kp RIGHT      &trans
&trans  &trans  &trans  &trans  &trans    &kp PAGE_DOWN  &kp HOME                  &kp DOWN                   &kp PG_DN      &kp END
&trans  &trans  &trans  &trans                           &bt BT_NXT                &kp RET                    &kp BKSP       &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp RIGHT_ARROW LEFT_ARROW &inc_dec_kp K_VOLUME_DOWN K_VOLUME_UP>;
        };

        num_layer {
            bindings = <
&trans  &trans  &trans  &kp LBRC  &kp RBRC    &kp LEFT_BRACKET  &kp N7       &kp N8  &kp N9  &kp RIGHT_BRACKET
&trans  &trans  &trans  &trans    &trans      &kp SEMI          &kp N4       &kp N5  &kp N6  &kp EQUAL
&trans  &trans  &trans  &trans    &trans      &kp GRAVE         &kp N1       &kp N2  &kp N3  &kp BACKSLASH
&trans  &trans  &trans  &trans                                  &bootloader  &kp N9  &kp N0  &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT_ARROW LEFT_ARROW &inc_dec_kp K_VOLUME_DOWN K_VOLUME_UP>;
        };

        blu_layer {
            bindings = <
&trans  &trans        &trans        &trans        &trans    &bt BT_CLR  &trans      &trans      &trans  &trans
&trans  &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans    &trans      &bt BT_PRV  &bt BT_NXT  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans    &trans      &trans      &trans      &trans  &trans
&trans  &trans        &trans        &trans                              &trans      &trans      &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp RIGHT_ARROW LEFT_ARROW &inc_dec_kp K_VOLUME_DOWN K_VOLUME_UP>;
        };

        hyper_layer {
            bindings = <
&kp LS(LA(LC(LG(Q))))  &kp LS(LA(LC(LG(W))))  &kp LS(LC(LA(LG(E))))  &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(T))))    &kp LS(LC(LA(LG(Y))))  &kp LS(LA(LG(LC(U))))  &kp LS(LA(LC(LG(I))))  &kp LS(LA(LG(LC(O))))  &kp LS(LA(LC(LG(P))))
&kp LS(LA(LC(LG(A))))  &kp LS(LA(LC(LG(S))))  &kp LS(LA(LC(LG(D))))  &kp LS(LA(LC(LG(F))))  &kp LA(LC(LG(LS(G))))    &kp LS(LA(LC(LG(H))))  &kp LS(LA(LC(LG(J))))  &kp LS(LA(LC(LG(K))))  &kp LS(LC(LA(LG(L))))  &trans
&kp LG(LC(LS(LA(Z))))  &kp LS(LA(LC(LG(X))))  &kp LS(LA(LG(LC(C))))  &kp LS(LA(LC(LG(V))))  &kp LS(LA(LC(LG(B))))    &kp LS(LA(LC(LG(N))))  &kp LS(LA(LC(LG(M))))  &trans                 &trans                 &trans
&trans                 &trans                 &trans                 &trans                                                                 &trans                 &trans                 &trans                 &trans
            >;
        };
    };
};
