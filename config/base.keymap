#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        lock: lock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(Q))>;
            label = "LOCK";
        };

        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp W &kp A &kp P &kp N &kp I &kp L &kp S &kp M &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };

        phone: phone {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N9 &kp N1 &kp N9 &kp N9 &kp N9 &kp N9 &kp N9 &kp N9 &kp N9 &kp N9>;
            label = "PHONE";
        };

        snap: snap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(N4)))>;
            label = "SNAP";
        };

        address: address {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A) &kp SPACE &kp N5 &kp N0 &kp N4>;
            label = "ADDRESS";
        };

        mark_read: mark_read {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp STAR &kp U &kp LS(I) &kp STAR &kp N>;
            label = "MARK_READ";
        };

        smart_period: smart_period {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &sl 8>;
            label = "SMART_PERIOD";
        };

        smart_qmark: smart_qmark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QMARK &sl 8>;
            label = "SMART_QMARK";
        };

        smart_space: smart_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &fast_sk LSHIFT>;
            label = "SMART_SPACE";
        };

        quick_approve: quick_approve {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 100>,
                <&kp LG(F)>,
                <&macro_wait_time 10>,
                <&kp LS(Q) &kp U &kp I &kp C &kp K &kp SPACE &kp LS(A) &kp P &kp P &kp R &kp O &kp V &kp E>,
                <&macro_wait_time 100>,
                <&kp RET &kp ESC &kp RET>;

            label = "QUICK_APPROVE";
        };

        quick_lgtm: quick_lgtm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 100>,
                <&kp LG(F)>,
                <&macro_wait_time 10>,
                <&kp LS(Q) &kp U &kp I &kp C &kp K &kp SPACE &kp LS(L) &kp LS(G) &kp LS(T) &kp LS(M)>,
                <&macro_wait_time 100>,
                <&kp RET &kp ESC &kp RET>;

            label = "QUICK_LGTM";
        };

        select_word: select_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT) &kp LA(LEFT) &kp LA(LS(RIGHT))>;
            label = "SELECT_WORD";
        };

        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT) &kp LG(LEFT) &kp LS(LG(RIGHT))>;
            label = "SELECT_LINE";
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 34 35 36 37>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <50>;
            hold-while-undecided;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <50>;
            hold-while-undecided;
        };

        period_morph: period_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_MORPH";
            bindings = <&smart_period>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        qmark_morph: qmark_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "QMARK_MORPH";
            bindings = <&kp SLASH>, <&smart_qmark>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        fast_sk: fast_sticky_key {
            compatible = "zmk,behavior-sticky-key";
            label = "FAST_STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <1000>;
            lazy;
        };

        caps_wrd: caps_wrd {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WRD";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE MINUS DELETE BACKSPACE>;
        };

        mo_smart_space: mo_smart_space {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_SMART_SPACE";
            bindings = <&mo>, <&smart_space>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "hold-preferred";
            retro-tap;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_wrd>;
            key-positions = <14 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &lt 9 W      &kp E        &lt 7 R        &kp T        &kp Y                 &kp U          &kp I        &kp O          &kp P
&hml LCTRL A  &hml LALT S  &hml LGUI D  &hml LSHIFT F  &kp G        &kp H                 &hmr RSHIFT J  &hmr RGUI K  &hmr RALT L    &hmr RCTRL SQT
&kp Z         &kp X        &kp C        &kp V          &kp B        &kp N                 &kp M          &kp COMMA    &period_morph  &qmark_morph
                                        &lt 3 ESC      &lt 2 SPACE  &lt 1 TAB  &kp SPACE  &kp C_MUTE     &lt 4 RET    &lt 5 BSPC     &lt 6 MINUS
            >;

            sensor-bindings =
                <&inc_dec_kp RIGHT LEFT>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        navigation_layer {
            bindings = <
&lock   &trans  &trans  &trans  &trans  &kp LC(LEFT)             &kp LG(LS(LBKT))  &kp LS(LG(RBKT))  &kp LC(RIGHT)  &trans
&trans  &trans  &trans  &trans  &trans  &kp LEFT                 &kp DOWN          &kp UP            &kp RIGHT      &trans
&trans  &trans  &trans  &trans  &trans  &trans                   &kp PG_DN         &kp PG_UP         &trans         &trans
                        &trans  &trans  &trans        &kp SPACE  &kp C_MUTE        &trans            &trans         &trans
            >;

            sensor-bindings =
                <&inc_dec_kp RIGHT LEFT>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        number_layer {
            bindings = <
&trans  &trans  &trans  &kp LBRC  &kp RBRC  &kp LBKT                &kp N7  &kp N8  &kp N9  &kp RBKT
&trans  &trans  &trans  &kp LPAR  &kp RPAR  &kp SEMI                &kp N4  &kp N5  &kp N6  &kp EQUAL
&trans  &trans  &trans  &kp LBKT  &kp RBKT  &kp GRAVE               &kp N1  &kp N2  &kp N3  &kp BSLH
                        &trans    &trans    &trans     &bootloader  &none   &trans  &kp N0  &kp MINUS
            >;

            sensor-bindings =
                <&inc_dec_kp RIGHT LEFT>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        symbol_layer {
            bindings = <
&lock   &trans  &trans  &trans  &trans  &kp LBRC          &kp AMPS  &kp STAR   &kp LPAR   &kp RBRC
&trans  &trans  &trans  &trans  &trans  &kp COLON         &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS
&trans  &trans  &trans  &trans  &trans  &kp TILDE         &kp EXCL  &kp AT     &kp HASH   &kp PIPE
                        &trans  &trans  &trans     &none  &none     &kp LPAR   &kp RPAR   &kp UNDER
            >;

            sensor-bindings =
                <&inc_dec_kp DOWN UP>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        macro_layer {
            bindings = <
&lock     &none  &email  &none  &none   &none             &mark_read  &none  &none        &none
&address  &none  &none   &none  &none   &none             &none       &none  &quick_lgtm  &quick_approve
&none     &none  &snap   &none  &none   &none             &phone      &none  &none        &none
                         &none  &trans  &none  &kp SPACE  &kp C_MUTE  &none  &none        &none
            >;

            sensor-bindings =
                <&inc_dec_kp RIGHT LEFT>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        function_layer {
            bindings = <
&none         &none         &bt BT_CLR    &none         &sys_reset  &sys_reset         &kp F7       &kp F8  &kp F9  &kp F11
&trans        &trans        &trans        &trans        &none       &none              &kp F4       &kp F5  &kp F6  &kp F12
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &none       &kp F10            &kp F1       &kp F2  &kp F3  &none
                                          &none         &caps_word  &none       &none  &bootloader  &none   &none   &none
            >;

            sensor-bindings =
                <&inc_dec_kp RIGHT LEFT>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        hyper_layer {
            bindings = <
&kp LS(LG(LA(LC(Q))))  &kp LG(LA(LS(LC(W))))  &kp LG(LS(LA(LC(E))))  &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(T))))  &kp LS(LA(LC(LG(Y))))             &kp LS(LA(LC(LG(U))))  &kp LS(LG(LC(LA(I))))      &kp LS(LA(LC(LG(O))))    &kp LS(LA(LC(LG(P))))
&kp LS(LG(LA(LC(A))))  &kp LG(LA(LS(LC(S))))  &kp LG(LS(LA(LC(D))))  &kp LS(LA(LC(LG(F))))  &kp LS(LA(LC(LG(G))))  &kp LS(LA(LC(LG(H))))             &kp LS(LA(LC(LG(J))))  &kp LS(LG(LC(LA(K))))      &kp LS(LA(LC(LG(L))))    &kp LS(LA(LC(LG(SQT))))
&kp LS(LG(LA(LC(Z))))  &kp LG(LA(LS(LC(X))))  &kp LG(LS(LA(LC(C))))  &kp LS(LA(LC(LG(V))))  &kp LS(LA(LC(LG(B))))  &kp LS(LA(LC(LG(N))))             &kp LS(LA(LC(LG(M))))  &kp LS(LG(LC(LA(COMMA))))  &kp LS(LA(LC(LG(DOT))))  &kp LS(LA(LC(LG(FSLH))))
                                                                     &none                  &none                  &kp LG(GRAVE)          &kp SPACE  &kp C_MUTE             &none                      &none                    &none
            >;

            sensor-bindings =
                <&inc_dec_kp RIGHT LEFT>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        win_man_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &kp LA(LC(LG(Y)))          &kp LA(LG(LC(U)))  &kp LA(LC(LG(I)))      &kp LA(LC(LG(O)))    &trans
&trans  &trans  &trans  &trans  &trans  &kp LA(LC(LG(H)))          &kp LA(LC(LG(J)))  &kp LA(LC(LG(K)))      &kp LA(LG(LC(L)))    &trans
&trans  &trans  &trans  &trans  &trans  &trans                     &kp LA(LC(LG(M)))  &kp LC(LA(LG(COMMA)))  &kp LC(LA(LG(DOT)))  &trans
                        &trans  &trans  &trans             &trans  &trans             &trans                 &trans               &trans
            >;
        };

        sentence_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans               &trans          &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans               &trans          &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans               &trans          &trans  &trans  &trans  &trans
                        &trans  &mo_smart_space 2 0  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        word_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                &trans        &trans         &trans         &trans
&trans  &trans  &trans  &trans  &trans  &kp LA(LEFT)          &kp LG(LEFT)  &kp LG(RIGHT)  &kp LA(RIGHT)  &trans
&trans  &trans  &trans  &trans  &trans  &trans                &trans        &select_line   &select_word   &trans
                        &trans  &trans  &trans        &trans  &trans        &trans         &trans         &trans
            >;
        };
    };
};
